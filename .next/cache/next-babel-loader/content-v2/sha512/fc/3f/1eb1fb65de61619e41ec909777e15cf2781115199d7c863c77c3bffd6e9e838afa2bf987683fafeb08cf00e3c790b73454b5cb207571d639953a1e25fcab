{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/devchicala/Documentos/meus projectos/ReactJS/moveit-next/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { ChallengesContext } from './ChallengesContext';\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setisActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setisActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setisActive(false);\n    setHasFinished(false);\n    setTime(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setisActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/devchicala/Documentos/meus projectos/ReactJS/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setisActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAAmBA,aAAnB,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoEC,QAApE,QAAoF,OAApF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AACP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYF,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAD8B;AAE9BG,MAAAA,OAF8B;AAG9BL,MAAAA,WAH8B;AAI9BF,MAAAA,QAJ8B;AAK9BQ,MAAAA,cAL8B;AAM9BC,MAAAA;AAN8B,KAAlC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import { Children, createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { ChallengesContext } from './ChallengesContext';\n\ninterface CountdownContextData {\n    minutes: number;\n    seconds: number;\n    hasFinished: boolean;\n    isActive: boolean;\n    startCountdown: () => void;\n    resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n    children: ReactNode\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData)\nlet countdownTimeout: NodeJS.Timeout;\n\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n    const { startNewChallenge } = useContext(ChallengesContext)\n\n    const [time, setTime] = useState(0.1 * 60);\n    const [isActive, setisActive] = useState(false);\n    const [hasFinished, setHasFinished] = useState(false);\n\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n\n    function startCountdown() {\n        setisActive(true);\n      }\n    \n      function resetCountdown() {\n        clearTimeout(countdownTimeout);\n        setisActive(false);\n        setHasFinished(false);\n        setTime(0.1 * 60);\n      }\n    \n      useEffect(() => {\n        if (isActive && time > 0) {\n          countdownTimeout = setTimeout(() => {\n            setTime(time - 1);\n          }, 1000);\n        } else if (isActive && time == 0) {\n          setHasFinished(true);\n          setisActive(false);\n          startNewChallenge();\n        }\n      }, [isActive, time]);\n\n    return (\n        <CountdownContext.Provider value={{\n            minutes,\n            seconds,\n            hasFinished,\n            isActive,\n            startCountdown,\n            resetCountdown,\n        }}>\n            {children}\n        </CountdownContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}