{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/devchicala/Documentos/meus projectos/ReactJS/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useEffect, useState } from \"react\";\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setcurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setchallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setactiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randonChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randonChallengeIndex];\n    setactiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission == 'granted') {\n      new Notification('Novo desafio!!!', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setactiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setcurrentExperience(finalExperience);\n    setactiveChallenge(null);\n    setchallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/devchicala/Documentos/meus projectos/ReactJS/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setcurrentExperience","challengesCompleted","setchallengesCompleted","activeChallenge","setactiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randonChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAAyB,CAAzB,CAA9B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY,CAACC,iBAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAmB;AACjBZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASc,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;AAEA,QAAIC,KAAJ,CAAU,mBAAV,EAA+BC,IAA/B;;AAEA,QAAIV,YAAY,CAACW,UAAb,IAA2B,SAA/B,EAA0C;AACxC,UAAIX,YAAJ,CAAiB,iBAAjB,EAAoC;AAClCY,QAAAA,IAAI,EAAG,WAAUJ,SAAS,CAACK,MAAO;AADA,OAApC;AAGD;AACF;;AAED,WAASC,cAAT,GAA0B;AACxBlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASmB,iBAAT,GAA6B;AAC3B,QAAG,CAACpB,eAAJ,EAAqB;AACnB;AACD;;AAED,UAAM;AAAEkB,MAAAA;AAAF,QAAclB,eAApB;AAEA,QAAIqB,eAAe,GAAGzB,iBAAiB,GAAGsB,MAA1C;;AAEA,QAAIG,eAAe,IAAInB,qBAAvB,EAA8C;AAC5CmB,MAAAA,eAAe,GAAGA,eAAe,GAAGnB,qBAApC;AACAK,MAAAA,OAAO;AACR;;AAEDV,IAAAA,oBAAoB,CAACwB,eAAD,CAApB;AACApB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILI,MAAAA,qBAJK;AAKLK,MAAAA,OALK;AAMLC,MAAAA,iBANK;AAOLR,MAAAA,eAPK;AAQLmB,MAAAA,cARK;AASLC,MAAAA;AATK,KADT;AAAA,cAaG3B;AAbH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport challenges from '../../challenges.json'\n\ninterface challenge {\n    type: 'body'|'eye',\n    description: string;\n    amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  experienceToNextLevel: number;\n  activeChallenge: challenge;\n  resetChallenge: () => void;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  completeChallenge: () => void;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setcurrentExperience] = useState(0);\n  const [challengesCompleted, setchallengesCompleted] = useState(0);\n\n  const [activeChallenge, setactiveChallenge] = useState(null);\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4,2)\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, [])\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randonChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randonChallengeIndex];\n\n    setactiveChallenge(challenge);\n\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission == 'granted') {\n      new Notification('Novo desafio!!!', {\n        body: `Valendo ${challenge.amount}xp!`\n      })\n    }\n  }\n\n  function resetChallenge() {\n    setactiveChallenge(null)\n  }\n\n  function completeChallenge() {\n    if(!activeChallenge) {\n      return;\n    }\n\n    const { amount  } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setcurrentExperience(finalExperience);\n    setactiveChallenge(null);\n    setchallengesCompleted(challengesCompleted + 1)\n  }\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        challengesCompleted,\n        experienceToNextLevel,\n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        completeChallenge,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}